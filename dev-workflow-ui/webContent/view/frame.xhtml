<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://xmlns.jcp.org/jsf/core"
  xmlns:h="http://xmlns.jcp.org/jsf/html" xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
  xmlns:ic="http://ivyteam.ch/jsf/component" xmlns:p="http://primefaces.org/ui"
  xmlns:pe="http://primefaces.org/ui/extensions">
<h:body>
  <f:metadata>
    <f:viewParam name="originalUrl" value="#{frameIvyDevWfBean.originalUrl}" />
  </f:metadata>
  <ui:composition template="../includes/template/template.xhtml">
    <ui:define name="content">
      <div class="card mb-0">
        <h:form id="iFrameForm">
          <div class="card-header pb-0">
            <div class="card-title flex align-items-center">
              <i class="pr-3 si si-task-list-edit"></i>
              <h6 class="m-0">
                <h:outputText id="frameTaskName" value="#{frameIvyDevWfBean.taskName}" />
              </h6>
            </div>
            <p:linkButton id="openStartFullscreenBtn" href="#{frameIvyDevWfBean.taskUrl}" icon="si si-expand-6"
              styleClass="ml-auto ui-button-secondary rounded-button" />
            <p:tooltip for="openStartFullscreenBtn" value="Open current process start on a fullscreen page"
              position="left" />
            <p:commandButton value="Sidesteps" styleClass="ml-1" id="sidestepsBtn"
              rendered="#{frameIvyDevWfBean.renderSidestepBtn()}" icon="si si-arrow-down-1" />
            <p:menu id="sidestepMenu" overlay="true" trigger="sidestepsBtn" my="right top" at="right bottom"
              model="#{frameIvyDevWfBean.sidestepsMenuModel}" styleClass="menu-no-icons" />
          </div>
          <p:remoteCommand name="useTaskInIFrame" actionListener="#{frameIvyDevWfBean.useTaskInIFrame()}"
            update="@form" />
        </h:form>
        <hr />
        <iframe id="iFrame" src="#{frameIvyDevWfBean.taskUrl}"
          style="height: calc(100vh - 205px); width: 100%; border: 0; visibility: hidden;"></iframe>
      </div>
      <script>
        function iframeURLChange(iframe, callback) {
          var lastDispatched = null;

          var dispatchChange = function () {
            useTaskInIFrame([{
              name: 'url',
              value: iframe.contentWindow.location.pathname
            }]);

            var newHref = iframe.contentWindow.location.href;

            if (newHref !== lastDispatched) {
              callback(newHref, iframe);
              lastDispatched = newHref;
              updateHistory(newHref);
            }
          };

          var updateHistory = function (newHref) {
            var newHrefUrl = new URL(newHref);
            var historyUrl = new URL(window.location);
            historyUrl.searchParams.set('taskUrl', newHrefUrl.pathname + newHrefUrl.search);
            history.replaceState({}, "", historyUrl);
          }

          var unloadHandler = function () {
            // Timeout needed because the URL changes immediately after
            // the `unload` event is dispatched.
            setTimeout(dispatchChange, 0);
            iframe.style.visibility = 'hidden';
          };

          function attachUnload() {
            // Remove the unloadHandler in case it was already attached.
            // Otherwise, there will be two handlers, which is unnecessary.
            iframe.contentWindow.removeEventListener("unload", unloadHandler);
            iframe.contentWindow.addEventListener("unload", unloadHandler);
          }

          iframe.addEventListener("load", function () {
            try {
              // Try to access loaded iframe content
              iframe.contentWindow.content;
              attachUnload();
              // Just in case the change wasn't dispatched during the unload event...
              dispatchChange();
              iframe.style.visibility = 'visible';
            } catch (e) {
              // Open iframe content in current window if it could not be loaded
              window.location = iframe.src;
            }
          });

          attachUnload();
        }

        const TASK = 'task.xhtml';
        const TASKS = 'tasks.xhtml';
        const CASE = 'case.xhtml';
        const CASES = 'cases.xhtml';
        const HOME = 'home.xhtml';
        const STARTS = 'starts.xhtml';
        const LOGIN = 'login.xhtml';
        const LOGINTABLE = 'loginTable.xhtml';

        const authorizedUrls = new Map([
          ['/home.xhtml', HOME],
          ['/tasks.xhtml', TASKS],
          ['/starts.xhtml', STARTS],
          ['/login.xhtml', LOGIN],
          ['/loginTable.xhtml', LOGINTABLE],
          ['/end.xhtml', HOME],
          ['DefaultApplicationHomePage.ivp', HOME],
          ['DefaultTaskListPage.ivp', TASKS],
          ['DefaultProcessStartListPage.ivp', STARTS],
          ['DefaultLoginPage.ivp', LOGIN],
          ['DefaultEndPage.ivp', HOME]
        ]);

            function checkAndReturnUrl(newURL, originPage) {
              alert("newURL: " + newURL + " | originPage: " + originPage);
              if (newURL.includes(TASK)) {
                alert("return substringTask " + newURL.substring(newURL.indexOf(TASK)));
                return newURL.substring(newURL.indexOf(TASK));
              }

              //no idea why this is not working?
              // --> if(newURL.includes('?endedTaskId=') AND originPage.includes(TASK + "?id")){..}  
              if (newURL.includes('?endedTaskId=') == originPage.includes(TASK + "?id") == true) {
                var id = originPage.split("id=")[1];
                if (id) {
                  alert("return task");
                  return TASK + "?id=" + id;
                }
                alert("return tasks");
                return TASKS;
              }
              if (newURL.includes('case.xhtml?id')) {
                var id = originPage.split("id=")[1];
                if (id != null) {
                  alert("return case");
                  return CASE + "?id=" + id;
                }
                alert("return cases");
                return CASES;
              }

              var entry = [...authorizedUrls.entries()].find(([key, value]) =>
                newURL.includes(key)
              );
              if (entry != null) {
                alert("return, redirect to " + entry[1]);
                return entry[1];
              }

              alert("undefined");
              return undefined;
            }

        iframeURLChange(document.getElementById("iFrame"), function (newURL, iframe) {
          var originPage = new URLSearchParams(window.location.search).get('originalUrl');
          if (iframe.contentWindow.location.pathname.match("/default/redirect.xhtml")) {
            var redirectedPage = new URLSearchParams(iframe.contentWindow.location.search).get("redirectPage");
            var newPage = checkAndReturnUrl(redirectedPage, originPage);
            if (newPage) {
              window.location = newPage;
            }
            else {
              window.location = redirectedPage;
            }
          }
          else {
            var newPage = checkAndReturnUrl(newURL, originPage);
            if (newPage) {
              window.location = newPage;
            }
          }
        });
      </script>
    </ui:define>
  </ui:composition>
</h:body>
</html>
